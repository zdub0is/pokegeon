/**
 * This Util determines which background to render based on the surrounding tile assuming a normal tile set.
 * 
 */

import { Tile } from 'dungeon-mystery'

// Define the tile types
const WALL_TILE = 0;
const FLOOR_TILE = 1;
const SECONDARY_TERRAIN_TILE = 2;

// Define the mapping of bitmasks to sprite indices
const tileMap = {
  0b00000000: 19, // Example tile with no neighbors
  0b00000001: 1, // Example tile with a floor neighbor to the NW
  0b10101000000: 20,
  0b1000000: 77,
  0b101000000: 20,
  0b10000000000: 95,
  0b10100000000: 20,
  0b1010000: 37,
  0b1010000000000: 1,
  0b100000000000000: 108,
  0b100000000000001: 18,
  0b100000000000101: 18,
  0b101: 18,
  0b100: 90,
  0b101000000000101: 0,
  0b101000000000000: 1,
  0b10100: 37,
  0b101010000000101: 0,
    0b101010000000000: 1,
    0b1010100: 37,
    0b101000000010101: 33,
    0b101010101010101: 33,
    0b10100000: 33,
    0b101000000000001: 33,
    0b100000000010101: 33,
    0b10101: 33,
    0b101100000010101: 33,
    0b101001000010101: 33,
    0b1000000010000: 33,
    0b101010100000001: 33,
    0b101010101: 33,
    0b1000000000001: 33,
    0b1000000010100: 33,
    0b101000000010000: 33,
    0b10001: 33,
    0b10100000001: 33,
    0b101000001: 33,
    0b100000001: 33,
    0b101010100001001: 33,
    0b1000000101010101: 33,
    0b110000101010101: 33,
    
0b1010101010000: 33,
0b1010100000000: 33,
0b101010000: 33,
0b101010101000001: 33,
0b10101010101: 33,
0b101010100010001: 33,
0b101010000010000: 33,
0b1000001010100: 33,
0b1000101010101: 33,
0b101010100000101: 33,
0b100000101010101: 33,
0b1010101: 33,
0b101000100010101: 33,
0b101010000010101: 33,
0b100000100000101: 33,
0b101000001010101: 33,
0b1010001: 33,
0b101000100000000: 33,
0b1000001010000: 33,
0b1000100000000: 33,
0b100000100000001: 33,
0b10101000001: 33,
0b100100000001: 33,
0b1010101010100: 33,
0b1010101010001: 33,
0b101010101010000: 33,
0b1010100100000: 33,
0b10100100000001: 33,
0b100101010101: 33,
0b1010100110000001: 33,
0b10000101010101: 33,
0b1010100110100001: 33,
0b1010100110101001: 33,
0b1010000100101001: 33,
0b1000000100001001: 33,
0b100010000: 33,
0b1010000010000: 33,
0b100000101: 33,
0b1000100000001: 33,
0b110000001: 33,
0b110100001: 33,
0b10110101001: 33,
0b1000010101001: 33,
0b100110000101: 33,
0b10010101100001: 33,
0b1010100101010000: 33,
0b1010110101000: 33,
0b100000000: 33,
0b101010001: 33,
0b100000101000101: 33,
0b101010100000000: 33,
0b100010100000101: 33,
0b101000110010101: 33,
0b101011010010101: 33,
0b101101010000001: 33,
0b100101000001: 33,
0b100010101000101: 33,
0b100010110100101: 33,
0b10101010010001: 33,
0b101101000010000: 33,
0b1100000010000: 33,
0b1000000010001: 33,
0b10000101010000: 33,
0b1010101000000: 33,
0b101000010010101: 33,
0b101001000000001: 33,
0b1010000010100: 33,
0b101000010010000: 33,
0b1001000010000: 33,
0b1100000011000: 33,
0b1000010011010: 33,
0b1001001010010010: 33,
0b1001101001010000: 33,
0b1100110101000: 33,
0b110000100101001: 33,
0b1000000011000: 33,
0b1000000010010: 33,
0b1001000000010000: 33,
0b10100010000: 33,
0b1000010010000: 33,
0b1100001010000: 33,
0b1000100101000: 33,
0b1000100000101: 33,
0b100000100001001: 33,
0b101010110000101: 33,
0b100100110000001: 33,
0b10010101010101: 33,
0b101010101100001: 33,
0b10010100100001: 33,
0b100011000: 33,
0b1010000011010: 33,
0b1001000001010110: 33,
0b1001000101010101: 33,
0b101010100011001: 33,
0b101010000011010: 33,
0b1001000000010110: 33,
0b1001000000001001: 33,
0b10100000101: 33,
0b100000010010101: 33,
0b101100001010101: 33,
0b101011000000101: 33,
0b100000110100101: 33,
0b110101001: 33,
0b100110101001: 33,
0b10000100101001: 33,
0b100010100: 33,
0b1010000000001: 33,
0b101010100: 33,
0b1010001010100: 33,
0b1000100010001: 33,
0b1000000000101: 33,
0b100000101000001: 33,
0b10101010001: 33,
0b101010101010100: 33,
0b1010110000000: 33,
0b101010100100001: 33,
0b101010000000001: 33,
0b101010110000001: 33,
0b101010110100001: 33,
0b101010110101001: 33,
0b101001010010101: 33,
0b101101010010101: 33,
0b101101010101001: 33,
0b10000100000001: 33,
0b1000000100000001: 33,
0b1010010010100: 33,
0b1001000000001: 33,
0b1010000101011010: 33,
0b1001010101010010: 33,
0b1001010101010000: 33,
0b1000010101010101: 33,
0b1000000110000001: 33,
0b100100010010: 33,
0b1001010001010100: 33,
0b10101100001: 33,
0b10010100000101: 33,
0b1000000011001: 33,
0b101000000011010: 33,
0b1001000000011010: 33,
0b1001000101000001: 33,
0b100000000010001: 33,
0b101000001010100: 33,



};

// Function to generate the bitmask for a given tile
function getBitmask(grid, x, y) {
  let bitmask = 0;
  const directions = [
    { dx: 0, dy: -1 }, // N
    { dx: 1, dy: -1 }, // NE
    { dx: 1, dy: 0 },  // E
    { dx: 1, dy: 1 },  // SE
    { dx: 0, dy: 1 },  // S
    { dx: -1, dy: 1 }, // SW
    { dx: -1, dy: 0 }, // W
    { dx: -1, dy: -1 } // NW
  ];

  directions.forEach((dir, index) => {
    const nx = x + dir.dx;
    const ny = y + dir.dy;
    if (grid[ny] === undefined || grid[ny][nx] === undefined) {
      bitmask |= (WALL_TILE << (index * 2)); // Consider out-of-bounds as wall
    } else {
      bitmask |= (grid[ny][nx].terrain_flags.terrain_type << (index * 2)); // Shift by 2 bits per tile
    }
  });

  return bitmask;
}

// Function to get the tile index from the bitmask
function getTileIndex(grid, x, y) {
  const bitmask = getBitmask(grid, x, y);
  if (bitmask != 0 && !tileMap[bitmask] && grid[y][x].terrain_flags.terrain_type == 1) { //
    console.log(y, x, grid[y][x].terrain_flags.terrain_type, (bitmask >>> 0).toString(2)) // Fallback to default if not defined
  }
  return tileMap[bitmask] || 0;
  
}

// Example grid and rendering function


export function renderGrid(grid) {
    const gridResult = [];
  for (let y = 0; y < grid.length; y++) {
    let row = [];
    for (let x = 0; x < grid[y].length; x++) {
      const tileIndex = getTileIndex(grid, x, y);
    row.push(tileIndex);
    }
    gridResult.push(row);
  }
    return gridResult;
}
